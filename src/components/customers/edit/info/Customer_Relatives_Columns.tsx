

import { FC, useState , useEffect , useContext } from "react"
import {  Input } from "templates/form/Input";
import { set_Customer_Relatives_Num } from "store/actions/action_Customer"
import { useDispatch, useSelector } from "react-redux";

import { toast } from "react-toastify" ;


import axios  from "utils/axios";


type cRel = { 
    current  : string | undefined ;
    register : any ;
    setValue : any ;
}


// @ Èóú‰øÇ‰∫∫ÂçÄÂ°ä
const Customer_Relatives_Columns : FC< cRel > = ( { current , register , setValue  } ) => {

    const dispatch = useDispatch() ; 

    // ÁõÆÂâçÂÆ¢Êà∂ : ÊâÄÊúâÈóú‰øÇ‰∫∫ 
    const Current_Customer_Relatives = useSelector( ( state : any ) => state.Customer.Current_Customer_Relatives )

    // È†êË®≠Èóú‰øÇ‰∫∫Êï∏
    const [ rel_Arr , set_Rel_Arr ]  = useState( [ 1 ] ) ;

    // ÈªûÈÅ∏ _ Êñ∞Â¢û : Èóú‰øÇ‰∫∫ 
    const click_Add_Relatives = () => {
    
        set_Rel_Arr( [ ...rel_Arr , rel_Arr.length + 1 ] ) ;

    } ;

    // ÈªûÈÅ∏ _ Âà™Èô§ : Èóú‰øÇ‰∫∫ 
    const click_Delete_Relatives = ( table_Id : string , customer_Id : string ) => {

        axios.put( `/customers/update_relation/${ table_Id }` , { is_archive : 1 } ).then( res => {

            toast( `ü¶Ñ Ë≥áÊñôÂ∑≤Â∞ÅÂ≠ò„ÄÇÂ¶ÇÊ¨≤ÊÅ¢Âæ©ÔºåË´ãÊ¥ΩË©¢ÁÆ°ÁêÜÂì°„ÄÇ`, { position: "top-left", autoClose: 1500, hideProgressBar: false, closeOnClick: true });

            // Êü•Ë©¢ _ ÂÆ¢Êà∂Èóú‰øÇ‰∫∫„ÄÅÂà∑Êñ∞È†ÅÈù¢
            axios.get( `/customers/show_relations/${ customer_Id }` ).then( res => { 
                set_Rel_Arr( res.data )
            })  

        })
    
    } ;

    // ÈªûÈÅ∏ _ Èóú‰øÇ‰∫∫ÂàóË°®ÊåâÈàï
    const click_Relatives_Btn = ( data : any ) => {

        set_Rel_Arr( [1] ) ;  // Ë®≠ÂÆö _ È°ØÁ§∫‰∏ÄÂÄãÈóú‰øÇ‰∫∫Ê¨Ñ‰ΩçÂçÄÂ°ä

        setValue( "customer_Relative_Name_1"      , data['name'] ) ;
        setValue( "customer_Relative_Type_1"      , data['type'] ) ;
        setValue( "customer_Relative_Family_1"    , data['tag'] ) ;
        setValue( "customer_Relative_Cellphone_1" , data['mobile_phone'] ) ;
        setValue( "customer_Relative_Telephone_1" , data['tel_phone'] ) ;
        setValue( "customer_Relative_Sex_1"       , data['sex'] ) ;
        setValue( "customer_Relative_Id_1"        , data['id'] ) ;
        setValue( "customer_Relative_Address_1"   , data['address'] ) ;
        
    }

    // @ ÊòØÂê¶ËôïÊñº _ Â∏∂ÂÖ•ËàäÈóú‰øÇ‰∫∫Ë≥áÊñô
    const is_Setting_Existing_Data  = current && Current_Customer_Relatives.length > 0 ;

    // @ ÊòØÂê¶ËôïÊñº _ Á∑®ËºØÂÆ¢Êà∂Ë≥áÊñô
    const is_Editting_Customer_Data = !current && Current_Customer_Relatives.length > 0 ;

    // Ë®≠ÂÆö _ Èóú‰øÇ‰∫∫ : Êï∏ÁõÆ 
    useEffect( ( ) => { 
    
       dispatch( set_Customer_Relatives_Num( rel_Arr.length ) )
      
    } , [ rel_Arr ] ) ;


    useEffect( () => { 

       // „Äê Êñ∞Â¢û „ÄëÂ∏∂ÂÖ•ÂÆ¢Êà∂Ë≥áÊñô _ ÂÖàÊ∏ÖÈô§È†êË®≠ ( Èóú‰øÇ‰∫∫ ) Â°´ÂØ´Ê¨Ñ‰Ωç
       if( is_Setting_Existing_Data ) set_Rel_Arr( [] ) ;  

       // „Äê Á∑®ËºØ „ÄëË®≠ÂÆö _ Èóú‰øÇ‰∫∫
       if( is_Editting_Customer_Data ) set_Rel_Arr( Current_Customer_Relatives ) ; 

    } , [ current , Current_Customer_Relatives ] ) ;


    const rel = { display:"inline-block" , width:"80%" , height:"40px" , overflow : "hidden" , top:"15px" }

    return <>

                <label className="label" style={{ fontSize : "1.3em" }} >

                    <i className = "fas fa-users"></i> &nbsp; Èóú‰øÇ‰∫∫ &nbsp;

                    { /* Èóú‰øÇ‰∫∫Âàó */ }  
                    <span className="relative" style={ rel }>

                        { ( current && Current_Customer_Relatives.length > 0 ) && 
                        
                            Current_Customer_Relatives.map( ( x:any , y:number ) => {

                                    return <b key={y} className="tag is-medium m_Right_20 pointer" onClick = { () => click_Relatives_Btn( x ) } > 
                                                { x['name'] } ( { x['tag'] } / { x['type'] } ) 
                                           </b>    

                            })
                            
                        } 

                    </span> 
                    

                    { /* Êñ∞Â¢ûÈàï  */ }

                    { !is_Setting_Existing_Data &&
                    
                      <b className = "tag is-medium is-success is-light hover relative" 
                        style     = {{ float : "right" }}
                        onClick   = { () => click_Add_Relatives() } > Êñ∞ Â¢û </b> 
                    
                    }


                </label> <br/>

                { 

                  rel_Arr.map( ( x : any , y : number ) => { 


                      if( x['is_archive'] === 1 ) return null ;  // Â∞ÅÂ≠òË≥áÊñô

                      const index = ( y+1 ).toString()  // Á¥¢ÂºïÊï∏Â≠ó

                      return  <div className="relative" key={ y } >

                                { /* Á¥¢Âºï */ }

                                { !is_Setting_Existing_Data &&
                                   <b className="tag is-medium m_Bottom_20 relative" style={{ left:"-10px" }}>  Èóú‰øÇ‰∫∫ _ { index }   </b> 
                                }

                                { /* Â∞ÅÂ≠òÈàï */ }
                                { y === 0 || 
                                     
                                    <b className="relative pointer" style={{ float:"right" , top:"10px" }} 
                                       onClick = { () => { if( window.confirm("Á¢∫Ë™çË¶Å : Â∞ÅÂ≠òÊ≠§Èóú‰øÇ‰∫∫Ë≥áÊñô ?") ) click_Delete_Relatives( x['relation_id'] , x['customer_id'] ) }  }>
                                       <i className="fas fa-download"></i>
                                    </b> 

                                }

                            
                                { /* ----- Èóú‰øÇ‰∫∫Ê¨Ñ‰Ωç -----  */ } 
                                <div className="columns is-multiline  is-mobile">

                                    <Input type="text" name={ `customer_Relative_Name_${ index }` } label="Âßì Âêç" register={register} error={ null } icon="fas fa-user" asterisk={true} columns="3" />
                
                                    { /* È°ûÂûã */ }    
                                    <div className="column is-3-desktop required">
                
                                        <p> È°û Âûã </p>
                
                                        <div className="control has-icons-left">
                
                                            <div className="select" >
                                                <select { ...register( `customer_Relative_Type_${ index}` ) } >
                                                    <option value="Á∑äÊÄ•ÈÄ£Áµ°‰∫∫"> Á∑äÊÄ•ÈÄ£Áµ°‰∫∫ </option>
                                                    <option value="‰ªãÁ¥π‰∫∫">    ‰ªãÁ¥π‰∫∫    </option>
                                                </select>
                                            </div>
                
                                            <div className="icon is-small is-left">
                                                <i className="fas fa-globe"></i>
                                            </div>
                
                                        </div>
                
                                    </div>
                
                                    { /* Èóú‰øÇ */ }
                                    <div className="column is-2-desktop required">
                
                                        <p> Èóú ‰øÇ </p>
                
                                        <div className="control has-icons-left">
                
                                            <div className="select">
                                                <select { ...register( `customer_Relative_Family_${ index }` ) }  >
                                                    <option value="Ë´ãÈÅ∏Êìá"> Ë´ãÈÅ∏Êìá </option>
                                                    <option value="Áà∂"> Áà∂ </option>
                                                    <option value="ÊØç"> ÊØç </option>
                                                    <option value="ÂÖÑ"> ÂÖÑ </option>
                                                    <option value="Âºü"> Âºü </option>
                                                    <option value="Âßä"> Âßä </option>
                                                    <option value="Â¶π"> Â¶π </option>
                                                    <option value="Â§´Â¶ª"> Â§´Â¶ª </option>
                                                    <option value="ÂêåÂ≠∏"> ÂêåÂ≠∏ </option>
                                                    <option value="ÊúãÂèã"> ÊúãÂèã </option>
                                                    <option value="ÂÖ∂‰ªñ"> ÂÖ∂‰ªñ </option>
                                                </select>
                                            </div>
                
                                            <div className="icon is-small is-left">
                                                <i className="fas fa-user-friends"></i>
                                            </div>
                
                                        </div>
                
                                    </div>
                
                                    <Input type="text" name={ `customer_Relative_Cellphone_${ index }` }  label="ÊâãÊ©üËôüÁ¢º" register={register} error={ null } icon="fas fa-mobile-alt" asterisk={true} columns="2" />
                                    <Input type="text" name={ `customer_Relative_Telephone_${ index }` }  label="ÂÆ∂Áî®ÈõªË©±" register={register} error={ null } icon="fas fa-phone" asterisk={false} columns="2" />
                
                                    { /* ÊÄßÂà• */ }  
                                    <div className="column is-2-desktop">
                
                                        <p> ÊÄß Âà• </p>
                
                                        <div className="control has-icons-left">
                
                                            <div className="select">
                                                <select {...register( `customer_Relative_Sex_${ index }` )}  >
                                                    <option value="Ë´ãÈÅ∏Êìá">Ë´ãÈÅ∏Êìá</option>
                                                    <option value="Áî∑"> Áî∑ </option>
                                                    <option value="Â•≥"> Â•≥ </option>
                                                </select>
                                            </div>
                
                                            <div className="icon is-small is-left">
                                                <i className="fas fa-venus-mars"></i>
                                            </div>
                
                                        </div>
                
                                    </div>
                
                                    <Input type="text" name={ `customer_Relative_Id_${ index }` }      label="Ë∫´ÂàÜË≠âÂ≠óËôü" register={register} error={ null } icon="fas fa-id-card-alt" asterisk={ false } columns="3"  />
                                    <Input type="text" name={ `customer_Relative_Address_${ index }` } label="ÈÄöË®äÂú∞ÂùÄ"   register={register} error={ null } icon="fas fa-home"        asterisk={ false } columns="7"  />
    
                                </div>   

                                <br/><br/>
                              
                             </div> 


                  }) 
                  
                }   


           </>
    
} ;


export default Customer_Relatives_Columns
       